/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0/userguide/java_library_plugin.html
 */

import java.util.regex.Matcher;

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
    id 'org.springframework.boot' version '2.5.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'net.bytebuddy.byte-buddy-gradle-plugin' version '1.12.6'

    //just added it in this branch
    id 'java'
    id 'maven-publish'
    id 'signing'
}


repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.

    // https://mvnrepository.com/artifact/org.springframework.kafka/spring-kafka
    implementation 'org.springframework.kafka:spring-kafka:2.8.2'


    implementation 'com.google.guava:guava:28.0-jre'
    implementation 'org.apache.kafka:kafka-clients:2.4.0'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    // implementation 'com.fasterxml.jackson.core:jackson-databind:2.0.1'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-aop:2.6.2'

    // https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-stream
    implementation 'org.springframework.cloud:spring-cloud-stream:3.2.2'
    implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka:3.1.4'
 
    // https://mvnrepository.com/artifact/net.bytebuddy/byte-buddy
    implementation 'net.bytebuddy:byte-buddy:1.12.6'
    // https://mvnrepository.com/artifact/net.bytebuddy/byte-buddy-agent
    implementation 'net.bytebuddy:byte-buddy-agent:1.12.6'

    // https://mvnrepository.com/artifact/com.h2database/h2
    runtimeOnly 'com.h2database:h2'

    // class indexing library
    implementation('org.atteo.classindex:classindex:3.4')
    annotationProcessor('org.atteo.classindex:classindex:3.4')

    //adding the javapoet library
    compileOnly 'com.squareup:javapoet:1.13.0'


    compileOnly 'org.projectlombok:lombok:1.18.22'
	annotationProcessor 'org.projectlombok:lombok:1.18.22'

    testImplementation 'ch.qos.logback:logback-classic:1.2.10'
	
	testCompileOnly 'org.projectlombok:lombok:1.18.22'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

}
// just added it in this branch

test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            customizePom(pom)
            groupId 'io.microhooks'
            artifactId 'Research'
            version '0.0.1'

            from components.java

            // create the sign pom artifact
            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)
                def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                artifact(pomAscFile) {
                    classifier = null
                    extension = 'pom.asc'
                }
            }

            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }
    repositories {
        maven {
            url "http://localhost:8081/repository/microhooks-private/"
            credentials {
                username "admin"
                password "398217645"
            }
            allowInsecureProtocol = true
        }
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Microhooks'
            name 'Microhooks.io'
            url 'https://github.com/medkadiri/Research'
            organization {
                name 'com.github.medkadiri'
                url 'https://github.com/medkadiri'
            }
            issueManagement {
                system 'GitHub'
                url 'https://github.com/medkadiri/Research/issues'
            }
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/medkadiri/Research/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/medkadiri/Research'
                connection 'scm:git:git://github.com/medkadiri/Research.git'
                developerConnection 'scm:git:ssh://git@github.com:medkadiri/Research.git'
            }
            developers {
                developer {
                    name 'Microhooks'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenJavaPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenJavaPublicationToMavenRepository {
        dependsOn project.tasks.signArchives
    }
}

tasks.withType(GenerateMavenPom).all {
    doLast {
        File file = new File("$buildDir/generated-pom.xml")
        def text = file.text
        def pattern = "(?s)(<dependencyManagement>.+?<dependencies>)(.+?)(</dependencies>.+?</dependencyManagement>)"
        Matcher matcher = text =~ pattern
        if (matcher.find()) {
            text = text.replaceFirst(pattern, "")
            def firstDeps = matcher.group(2)
            text = text.replaceFirst(pattern, '$1$2' + firstDeps + '$3')
        }
        file.write(text)
    }
}
//tasks.findByName("generatePomFileForMavenPublication")?.finalizedBy(fixPom)
